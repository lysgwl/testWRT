name: OpenWrt Builder

on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * 0'
  repository_dispatch:
  workflow_dispatch:

env:
  BUILD_SCRIPT: build-scripts.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      firmware-json: ${{ steps.compile-scripts.outputs.firmware_json }} 
    steps:
      - name: Checkout
        uses: actions/checkout@master
        
      - name: Initialization compile environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 运行脚本路径
          scripts_path="${GITHUB_WORKSPACE}/scripts"  
          if [ ! -d "${scripts_path}" ]; then
              echo "Script path does not exist, Please check!"  
              exit 1
          fi

          # 查找脚本并赋予权限
          find $GITHUB_WORKSPACE/scripts -exec chmod +x {} \;

          # 检查执行脚本
          scripts_file="${GITHUB_WORKSPACE}/scripts/${BUILD_SCRIPT}"
          if [ ! -e "${scripts_file}" ]; then
              echo "Script files does not exist, Please check!"
              exit 1
          fi

          # 检查磁盘空间
          df -hT
          
          echo "scripts_path=${scripts_path}" >> $GITHUB_ENV
          echo "scripts_file=${scripts_file}" >> $GITHUB_ENV

      - name: Run compile scripts
        id: compile-scripts
        working-directory: ${{ env.scripts_path }}
        run: |
          # 执行脚本
          scripts_file=${{ env.scripts_file }}
          if [ -x "${scripts_file}" ]; then
              source ${scripts_file} 1
          fi

          # 检查固件信息
          if [ -z "${FIRMWARE_JSON_ARRAY}" ]; then
              echo "Firmware does not exist, Please check!"
              exit 1
          elif echo "${FIRMWARE_JSON_ARRAY}" | jq 'length == 0'; then
              echo "Firmware Info is empty, Please check!"
              exit 1
          fi

          # 获取 JSON 数组
          JSON_ARRAY="${FIRMWARE_JSON_ARRAY}"

          # 设置输出
          echo "firmware_json=$(jq -c . <<< "${JSON_ARRAY}")" >> $GITHUB_OUTPUT

      - name: Extract Firmware Details
        id: extract_firmware_info 
        env:
          # 获取 JSON 字符串
          FIRMWARE_JSON: ${{ needs.compile-scripts.firmware_json}}
        run: |
          echo "${FIRMWARE_JSON}"

  upload:
    needs: build
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        firmware:
          ${{ fromJson(needs.build.outputs.firmware-json) }}
    steps:
      - name: Check matrix
        run: |
            echo "cur dir_name=${{ matrix.firmware.name }}"
            echo "cur dir_path=${{ matrix.firmware.path }}"      
